# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

 - name: PMD Analyser
  # You may pin to the exact commit or the version.
  # uses: synergy-au/pmd-analyser-action@e2087952f602f940871d32ba51445e28d08b057c
  uses: synergy-au/pmd-analyser-action@v2.1
  
  with:
    # Used to determine whether you just want to analyse the files changed or the whole repository.
    analyse-all-code: # optional, default is false
    # If you are looking to compare the file difference based on the GitHub pull request, you will need to specify the [GitHub secrets token](https://docs.github.com/en/actions/reference/authentication-in-a-workflow)
    auth-token: # optional
    # If you wish to define rules that log as an error, enter each rule name separated with a comma and no spaces. Note that if an error is identified the run will fail. e.g. ClassNamingConventions,GuardLogStatement
    error-rules: # optional
    # Choose whether you want the file comparison to be based on a git diff or based on the files changed specified on the GitHub pull request. Note that if you use the GitHub pull request option, this action will only work on a pull request event. Options to set this are either `git` or `github`.
    file-diff-type: # optional, default is git
    # Path to the sources to analyse. This can be a file name, a directory, or a jar or zip file containing the sources.
    file-path: 
    # If you wish to define rules that log as a note, enter each rule name separated with a comma and no spaces. Note that if a note is identified the run will not fail. e.g. ClassNamingConventions,GuardLogStatement
    note-rules: # optional
    # The version of PMD you would like to run. You can either specify latest to always get the newest version, or you can specify a version number like 6.37.0
    pmd-version: # optional, default is latest
    # The ruleset file you want to use. PMD uses xml configuration files, called rulesets, which specify which rules to execute on your sources. You can also run a single rule by referencing it using its category and name (more details here). For example, you can check for unnecessary modifiers on Java sources with -R category/java/codestyle.xml/UnnecessaryModifier.
    rules-path: 

